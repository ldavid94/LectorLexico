/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class Interfaz extends javax.swing.JFrame {
    //Crear un objeto JFileChooser para permitir al usuario seleccionar un archivo
    JFileChooser seleccionar = new JFileChooser();
    // Declara las variables archivo, entrada y salida
    File archivo;
    FileInputStream entrada;
    FileOutputStream salida;
    //Tenemos en cuenta que la declaracion de variables no asigna valores a dichos variables
    public Interfaz() {
        initComponents();
    }
    
     public String GuardarArchivo(File archivo,String documento){
        String mensaje = null;
        try {
            // se crea un objeto FileOutputStream con el archivo especificado
            salida = new FileOutputStream(archivo);
            //se convierte el documento a bytes y se escribe en el archivo
            byte[] bytxt = documento.getBytes();
            salida.write(bytxt);
            //Se indica que la operacion fue exitosa
            mensaje = "Archivo Guardado";
        } catch (Exception e) {
            //Si ocurre un erro, se deja mensaje como null 
        }
        return mensaje;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        btnGuardar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAnalizar.setText("Examinar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnGuardar.setText("Guardar Resultado");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("Analizador Léxico");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGuardar)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnalizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // Cree un objeto JFileChooser para permitir que el usuario busque y seleccione un archivo.
        JFileChooser doc = new JFileChooser();
        // Muestra el cuadro de diálogo Abrir archivo y espera a que el usuario seleccione un archivo.
        doc.showOpenDialog(null);
        
        try {
            // Crear un objeto Reader a partir del archivo seleccionado.
            Reader lector = new BufferedReader(new FileReader(doc.getSelectedFile()));
            // Crear un objeto Lexer y pasarle el objeto Reader. El objeto Lexer tokenizará la entrada.
            Lexer lexer = new Lexer(lector);
            // Crea una cadena para almacenar el resultado del análisis.
            String resultado = "";
            // Recorre los tokens devueltos por el objeto Lexer.
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    // Si no hay más tokens, agregue "FIN" a la cadena de resultados y muéstrelo en el cuadro de texto txtResultado.
                    resultado += "FIN";
                    txtResultado.setText(resultado);
                    return;
                }
                switch (tokens) {
                    // Si el token es ERROR, agregue "Simbolo no definido" a la cadena de resultado.
                    case ERROR:
                        resultado += "Simbolo no definido\n";
                        break;
                    // Si el token es Identificador, Numero o Reservadas, agregue el lexema y el tipo de token a la cadena de resultado.
                    case Identificador: case Numero: case Reservadas:
                        resultado += lexer.lexeme + ": Es un " + tokens + "\n";
                        break;
                        // Para cualquier otro token, agregue el tipo de token a la cadena de resultados.
                    default:
                        resultado += "Token: " + tokens + "\n";
                        break;
                }
            }
        } catch (FileNotFoundException ex) {
            // Si no se encuentra el archivo, registre el error.
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            // Si hay un error de E/S, registre el error.
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // if lo que haces es que si el usuario ha seleccionado "Guardar" en el diálogo del selector de archivos 
        if(seleccionar.showDialog(null, "Guardar")==JFileChooser.APPROVE_OPTION){
            // Obtener el archivo seleccionado
           archivo = seleccionar.getSelectedFile();
           // Aqui verificamos si la extensión del archivo es .txt
           if(archivo.getName().endsWith("txt")){
               // Obtener el texto del campo "txtResultado"
               String Documento=txtResultado.getText();
               // Guarda el texto en el archivo seleccionado
               String mensaje=GuardarArchivo(archivo, Documento);
               // Si hubo un error al guardar el archivo, mostrar un mensaje de error
               if(mensaje!=null){
                   JOptionPane.showMessageDialog(null, mensaje);
                // Si la extensión del archivo no es .txt, mostrar un mensaje de error  
               }else{
                   JOptionPane.showMessageDialog(null, "Archivo No Compatible");
               }
               // De lo contrario, muestra un mensaje de éxito
           }else{
               JOptionPane.showMessageDialog(null, "Guardar Documento de Texto");
           }
       }
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
